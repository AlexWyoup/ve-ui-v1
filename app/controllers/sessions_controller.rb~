class SessionsController < ApplicationController
  def create
    # verify if an omniauth.auth hash exists, if not consider it as a locally registered user.
    auth = request.env['omniauth.auth']
    if(auth==nil)
      authenticate_user
    else
    # Find an identity here
      @identity = Identity.find_from_omniauth(auth)

      if @identity.nil?
        # If no identity was found, create a brand new one here
        @identity = Identity.create_from_omniauth(auth)
      else
      # SQLLite doesn't support t.references and foreign key association. this is't needed if t.references is used in MySQL
      # Load the corresponding user and associate it in identity
        @user = User.find_by_id(@identity.user_id)
        if(@user.present?)
          logger.debug "Found user with id #{@identity.user_id}"
        @identity.user = @user
        else
          raise RecordNotFound, "Invalid user. Oops this might be a system error ! Inform the administrator."
        end
      end

      if signed_in?
        if @identity.user == current_user
          # User is signed in so they are trying to link an identity with their
          # account. But we found the identity and the user associated with it
          # is the current user. So the identity is already associated with
          # this user. So let's display an error message.
          #TO-DO: Change the redirection to the new page as required.
          redirect_to root_url, notice: "Already linked that account!"
        else
        # The identity is not associated with the current_user so lets
        # associate the identity
          @identity.user = current_user
          @user.save()
          #TO-DO: Change the redirection to the new page as required.
          redirect_to root_url, notice: "Successfully linked that account!"
        end
      else
        if @identity.user.present?
          # The identity we found had a user associated with it so let's
          # just log them in here
          self.current_user = @identity.user
          session[:user_id] = @identity.user_id
          logger.debug "current_users email #{current_user.email} with #{current_user.id} identity user id #{@identity.user_id}"
          #TO-DO: Change the redirection to the new page as required.
          redirect_to collaborate_display_url, notice: "Signed in!"
        else
        # No user associated with the identity so we need to create a new one
          redirect_to new_user_url, notice: "Please finish registering"
        end
      end
    end
  end

  def destroy
    self.current_user = nil
    redirect_to root_url, notice: "Signed out!"
  end

  def authenticate_user
    logger.debug "Authenticating for email #{params[:session][:email]} and password #{params[:session][:password]}"
    user = User.authenticate(params[:session][:email],params[:session][:password])
    if user
      logger.debug "user attributes hash: #{user}"
      session[:user_id] = user.id
      #TO-DO: Change the redirection to the new page as required.
      redirect_to root_url, :notice => "Signed in!"
    else
      flash.now.alert = "Invalid email or password"
      render "new"
    end
  end

end
